#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
@author: Curtis Yu
@contact: cuyu@splunk.com
@since: 9/12/16
"""
from mock import patch


def foo():
    return 'foo'


# patch can simply used by only inputting the target object that need to replaced.
# In this situation, you must append an argument to the method's input. This argument is a MagicMock object generated by patch decorator.
# So you can change the return value of the MagicMock object which will be the return value of calling the replaced object.
@patch('__main__.foo')
def test_one(mock_fuc):
    mock_fuc.return_value = 'bar'
    print foo
    print foo()
    # One goodness of inputting MagicMock object into method is here: you can make some assert of the mock object.
    mock_fuc.assert_called_once_with()
    print mock_fuc.call_count


def bar():
    return 'bar'


# patch can also used by inputting the replaced object in the decorator.
# In this situation, you do not need to append an argument to the method's input.
@patch('__main__.foo', bar)
def test_two():
    print foo
    print foo()


# Besides decorator, you can also use patch as `with` statement.
def test_three():
    with patch('__main__.foo', bar):
        print foo
        print foo()
    print foo
    print foo()


# Besides `with` statement, you can also control the scope by patch.start() and patch.stop() methods.
# This is more flexible than the methods above, and can be useful when patch with several test cases.
def test_four():
    patcher = patch('__main__.foo', bar)
    patcher.start()
    print foo
    print foo()
    patcher.stop()
    print foo
    print foo()


# Can use several patch at the same time.
# When inputting the MagicMock objects to the method, notice the sequence of the MagicMock objects is reverse to the decorators.
@patch('__main__.foo')
@patch('__main__.bar')
def test_five(mock_bar, mock_foo):
    mock_foo.return_value = 'zzz'
    mock_bar.return_value = 'mew'
    print foo
    print foo()
    print bar
    print bar()


if __name__ == '__main__':
    test_one()
    test_two()
    test_three()
    test_four()
    test_five()
